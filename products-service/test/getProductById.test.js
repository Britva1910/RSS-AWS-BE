"use strict";
const { handler } = require("../lambda-functions/getProductById");
const { products } = require("../lambda-functions/products");
jest.mock("../lambda-functions/products", () => ({
    products: [],
}));
describe("Get product by ID - getProductById", () => {
    beforeEach(() => {
        jest.resetAllMocks();
    });
    test("should return 200 and the product when a valid ID is provided", async () => {
        const mockProducts = [{ id: "1", title: "Product 1", price: 100 }];
        require("../lambda-functions/products").products = mockProducts;
        const event = {
            pathParameters: {
                id: "1",
            },
        };
        const response = await handler(event);
        expect(response.statusCode).toBe(200);
        expect(response.body).toBe(JSON.stringify({ id: "1", title: "Product 1", price: 100 }));
    });
    test("should return 400 if product is not found", async () => {
        require("../lambda-functions/products").products = [];
        const event = {
            pathParameters: {
                id: "1",
            },
        };
        const response = await handler(event);
        expect(response.statusCode).toBe(400);
        expect(response.headers["Content-Type"]).toBe("application/json");
        expect(response.body).toBe(JSON.stringify({ message: "Products data doesn't exist" }));
    });
    test("should return 400 if no products data exists", async () => {
        require("../lambda-functions/products").products = [];
        const event = {
            pathParameters: {
                id: "",
            },
        };
        const response = await handler(event);
        expect(response.statusCode).toBe(400);
        expect(response.headers["Content-Type"]).toBe("application/json");
        expect(response.body).toBe(JSON.stringify({ message: "Products data doesn't exist" }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHJvZHVjdEJ5SWQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldFByb2R1Y3RCeUlkLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUNsRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFN0QsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLFFBQVEsRUFBRSxFQUFFO0NBQ2IsQ0FBQyxDQUFDLENBQUM7QUFFSixRQUFRLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO0lBQ2xELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsK0RBQStELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0UsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUVuRSxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO1FBRWhFLE1BQU0sS0FBSyxHQUFHO1lBQ1osY0FBYyxFQUFFO2dCQUNkLEVBQUUsRUFBRSxHQUFHO2FBQ1I7U0FDRixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQzVELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMzRCxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRXRELE1BQU0sS0FBSyxHQUFHO1lBQ1osY0FBYyxFQUFFO2dCQUNkLEVBQUUsRUFBRSxHQUFHO2FBQ1I7U0FDRixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQzNELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5RCxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRXRELE1BQU0sS0FBSyxHQUFHO1lBQ1osY0FBYyxFQUFFO2dCQUNkLEVBQUUsRUFBRSxFQUFFO2FBQ1A7U0FDRixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxDQUFDLENBQzNELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBoYW5kbGVyIH0gPSByZXF1aXJlKFwiLi4vbGFtYmRhLWZ1bmN0aW9ucy9nZXRQcm9kdWN0QnlJZFwiKTtcclxuY29uc3QgeyBwcm9kdWN0cyB9ID0gcmVxdWlyZShcIi4uL2xhbWJkYS1mdW5jdGlvbnMvcHJvZHVjdHNcIik7XHJcblxyXG5qZXN0Lm1vY2soXCIuLi9sYW1iZGEtZnVuY3Rpb25zL3Byb2R1Y3RzXCIsICgpID0+ICh7XHJcbiAgcHJvZHVjdHM6IFtdLFxyXG59KSk7XHJcblxyXG5kZXNjcmliZShcIkdldCBwcm9kdWN0IGJ5IElEIC0gZ2V0UHJvZHVjdEJ5SWRcIiwgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5yZXNldEFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJzaG91bGQgcmV0dXJuIDIwMCBhbmQgdGhlIHByb2R1Y3Qgd2hlbiBhIHZhbGlkIElEIGlzIHByb3ZpZGVkXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tQcm9kdWN0cyA9IFt7IGlkOiBcIjFcIiwgdGl0bGU6IFwiUHJvZHVjdCAxXCIsIHByaWNlOiAxMDAgfV07XHJcblxyXG4gICAgcmVxdWlyZShcIi4uL2xhbWJkYS1mdW5jdGlvbnMvcHJvZHVjdHNcIikucHJvZHVjdHMgPSBtb2NrUHJvZHVjdHM7XHJcblxyXG4gICAgY29uc3QgZXZlbnQgPSB7XHJcbiAgICAgIHBhdGhQYXJhbWV0ZXJzOiB7XHJcbiAgICAgICAgaWQ6IFwiMVwiLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9CZShcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoeyBpZDogXCIxXCIsIHRpdGxlOiBcIlByb2R1Y3QgMVwiLCBwcmljZTogMTAwIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwic2hvdWxkIHJldHVybiA0MDAgaWYgcHJvZHVjdCBpcyBub3QgZm91bmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgcmVxdWlyZShcIi4uL2xhbWJkYS1mdW5jdGlvbnMvcHJvZHVjdHNcIikucHJvZHVjdHMgPSBbXTtcclxuXHJcbiAgICBjb25zdCBldmVudCA9IHtcclxuICAgICAgcGF0aFBhcmFtZXRlcnM6IHtcclxuICAgICAgICBpZDogXCIxXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFuZGxlcihldmVudCk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoNDAwKTtcclxuICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdKS50b0JlKFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0JlKFxyXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiUHJvZHVjdHMgZGF0YSBkb2Vzbid0IGV4aXN0XCIgfSlcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJzaG91bGQgcmV0dXJuIDQwMCBpZiBubyBwcm9kdWN0cyBkYXRhIGV4aXN0c1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICByZXF1aXJlKFwiLi4vbGFtYmRhLWZ1bmN0aW9ucy9wcm9kdWN0c1wiKS5wcm9kdWN0cyA9IFtdO1xyXG5cclxuICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICBwYXRoUGFyYW1ldGVyczoge1xyXG4gICAgICAgIGlkOiBcIlwiLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xyXG5cclxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0JlKDQwMCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSkudG9CZShcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9CZShcclxuICAgICAgSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIlByb2R1Y3RzIGRhdGEgZG9lc24ndCBleGlzdFwiIH0pXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl19